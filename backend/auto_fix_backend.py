#!/usr/bin/env python3
"""
Script de correction automatique pour le backend EazzyLotto
R√©sout automatiquement tous les probl√®mes identifi√©s
"""

import os
import sys
import subprocess
import socket
import time
import signal
import psutil

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üîß {title}")
    print('='*60)

def print_status(message, status):
    icon = "‚úÖ" if status else "‚ùå"
    print(f"{icon} {message}")

def kill_process_on_port(port):
    """Tue tous les processus utilisant le port sp√©cifi√©"""
    print_header(f"LIB√âRATION DU PORT {port}")
    
    killed_any = False
    for proc in psutil.process_iter(['pid', 'name', 'connections']):
        try:
            for conn in proc.info['connections'] or []:
                if conn.laddr.port == port:
                    print(f"üî´ Processus trouv√©: {proc.info['name']} (PID: {proc.info['pid']})")
                    proc.kill()
                    killed_any = True
                    print_status(f"Processus {proc.info['pid']} termin√©", True)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    if not killed_any:
        print_status("Aucun processus trouv√© sur ce port", True)
    
    # Attendre que le port soit lib√©r√©
    time.sleep(2)
    return check_port_free(port)

def check_port_free(port):
    """V√©rifie si un port est libre"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        result = sock.connect_ex(('localhost', port))
        return result != 0  # True si libre, False si occup√©
    finally:
        sock.close()

def install_dependencies():
    """Installe toutes les d√©pendances requises"""
    print_header("INSTALLATION DES D√âPENDANCES")
    
    try:
        # Installer les d√©pendances depuis requirements.txt
        result = subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ], capture_output=True, text=True, check=True)
        
        print_status("D√©pendances install√©es depuis requirements.txt", True)
        return True
        
    except subprocess.CalledProcessError as e:
        print_status(f"Erreur installation requirements.txt: {e}", False)
        
        # Installation manuelle des packages critiques
        critical_packages = [
            'fastapi==0.104.1',
            'uvicorn==0.24.0',
            'sqlalchemy==2.0.23',
            'psycopg2-binary==2.9.9',
            'python-dotenv==1.0.0',
            'pydantic==2.5.0',
            'python-multipart==0.0.6'
        ]
        
        print("üì¶ Installation manuelle des packages critiques...")
        all_success = True
        
        for package in critical_packages:
            try:
                subprocess.run([
                    sys.executable, '-m', 'pip', 'install', package
                ], capture_output=True, text=True, check=True)
                print_status(f"{package} install√©", True)
            except subprocess.CalledProcessError:
                print_status(f"Erreur installation {package}", False)
                all_success = False
        
        return all_success

def fix_main_py():
    """Corrige les probl√®mes dans main.py"""
    print_header("CORRECTION DE MAIN.PY")
    
    try:
        with open('main.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Corrections n√©cessaires
        fixes_applied = []
        
        # 1. Corriger les chemins des assets
        if '../../frontend/assets' in content:
            content = content.replace('../../frontend/assets', '../frontend/assets')
            content = content.replace('../../frontend', '../frontend')
            fixes_applied.append("Chemins assets corrig√©s")
        
        # 2. Ajouter un endpoint de sant√© si manquant
        if '/api/health' not in content:
            health_endpoint = '''
@app.get("/api/health")
async def health_check():
    """Endpoint de v√©rification de sant√©"""
    return {"status": "healthy", "message": "Backend EazzyLotto op√©rationnel"}
'''
            # Ajouter avant la derni√®re ligne
            content = content.rstrip() + health_endpoint + '\n'
            fixes_applied.append("Endpoint de sant√© ajout√©")
        
        # 3. Sauvegarder les corrections
        if fixes_applied:
            with open('main.py', 'w', encoding='utf-8') as f:
                f.write(content)
            
            for fix in fixes_applied:
                print_status(fix, True)
        else:
            print_status("Aucune correction n√©cessaire dans main.py", True)
        
        return True
        
    except Exception as e:
        print_status(f"Erreur correction main.py: {e}", False)
        return False

def start_backend():
    """D√©marre le backend FastAPI"""
    print_header("D√âMARRAGE DU BACKEND")
    
    try:
        # Commande de d√©marrage
        cmd = [
            sys.executable, '-m', 'uvicorn', 'main:app',
            '--reload', '--host', '0.0.0.0', '--port', '8000'
        ]
        
        print("üöÄ D√©marrage du serveur FastAPI...")
        print(f"Commande: {' '.join(cmd)}")
        
        # D√©marrer en arri√®re-plan
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Attendre un peu pour voir si √ßa d√©marre
        time.sleep(3)
        
        # V√©rifier si le processus est toujours en vie
        if process.poll() is None:
            print_status("Backend d√©marr√© avec succ√®s", True)
            print("üìç Backend accessible sur: http://localhost:8000")
            print("üìö Documentation API: http://localhost:8000/docs")
            print("üîç Sessions API: http://localhost:8000/api/session/sessions")
            return True
        else:
            stdout, stderr = process.communicate()
            print_status(f"Erreur d√©marrage: {stderr}", False)
            return False
            
    except Exception as e:
        print_status(f"Erreur d√©marrage backend: {e}", False)
        return False

def test_backend():
    """Teste si le backend r√©pond"""
    print_header("TEST DU BACKEND")
    
    import urllib.request
    import json
    
    test_urls = [
        ("Health Check", "http://localhost:8000/api/health"),
        ("Sessions API", "http://localhost:8000/api/session/sessions"),
        ("API Docs", "http://localhost:8000/docs")
    ]
    
    all_good = True
    for name, url in test_urls:
        try:
            response = urllib.request.urlopen(url, timeout=5)
            if response.status == 200:
                print_status(f"{name}: OK", True)
            else:
                print_status(f"{name}: HTTP {response.status}", False)
                all_good = False
        except Exception as e:
            print_status(f"{name}: Erreur - {e}", False)
            all_good = False
    
    return all_good

def main():
    print("üöÄ CORRECTION AUTOMATIQUE BACKEND EAZZYLOTTO")
    print("=" * 60)
    
    # Changer vers le r√©pertoire backend si n√©cessaire
    if os.path.basename(os.getcwd()) != 'backend':
        if os.path.exists('backend'):
            os.chdir('backend')
            print("üìÅ Changement vers le dossier backend")
        else:
            print("‚ùå Dossier backend non trouv√©")
            return False
    
    success_count = 0
    total_steps = 5
    
    # √âtape 1: Lib√©rer le port 8000
    if kill_process_on_port(8000):
        success_count += 1
    
    # √âtape 2: Installer les d√©pendances
    if install_dependencies():
        success_count += 1
    
    # √âtape 3: Corriger main.py
    if fix_main_py():
        success_count += 1
    
    # √âtape 4: D√©marrer le backend
    if start_backend():
        success_count += 1
        
        # √âtape 5: Tester le backend
        time.sleep(2)  # Laisser le temps au serveur de d√©marrer
        if test_backend():
            success_count += 1
    
    # R√©sum√© final
    print_header("R√âSUM√â FINAL")
    print(f"√âtapes r√©ussies: {success_count}/{total_steps}")
    
    if success_count == total_steps:
        print("\nüéâ SUCC√àS COMPLET !")
        print("‚úÖ Tous les probl√®mes ont √©t√© r√©solus")
        print("‚úÖ Backend d√©marr√© et fonctionnel")
        print("\nüîó LIENS UTILES:")
        print("‚Ä¢ Backend: http://localhost:8000")
        print("‚Ä¢ API Docs: http://localhost:8000/docs")
        print("‚Ä¢ Sessions: http://localhost:8000/api/session/sessions")
        print("‚Ä¢ Diagnostic Frontend: http://localhost:8081/session-diagnostic.html")
        print("\nüí° Votre plateforme EazzyLotto est maintenant op√©rationnelle !")
    else:
        print(f"\n‚ö†Ô∏è {total_steps - success_count} probl√®me(s) restant(s)")
        print("Consultez les messages d'erreur ci-dessus pour plus de d√©tails.")
    
    return success_count == total_steps

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
